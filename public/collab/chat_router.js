// Generated by CoffeeScript 1.6.3
/*
  Chat router class
*/


(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Batman.ChatRouter = (function(_super) {
    __extends(ChatRouter, _super);

    function ChatRouter() {
      _ref = ChatRouter.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ChatRouter.prototype.broadcast = function(info, socket) {
      /*
        routes events to the chat
      */

      var data;
      if (info.data == null) {
        return ChatRouter.__super__.broadcast.call(this, info, socket);
      }
      if (info.data.content != null) {
        return ChatRouter.__super__.broadcast.call(this, info, socket);
      }
      data = Batman.SocketEvent.toJSON(info.data);
      if (data.kind != null) {
        switch (data.kind) {
          case "join":
            this.addUser(data, socket);
            return this.message(data, socket);
          case "quit":
            this.removeUser(data, socket);
            return this.message(data, socket);
          case "talk":
            return this.message(data, socket);
          case "message":
            return this.message(data, socket);
        }
      }
    };

    ChatRouter.prototype.addUser = function(data, socket) {
      var content, event;
      content = {
        id: data.user,
        name: data.user
      };
      event = new Batman.SocketEvent.makePushEvent(content, "users");
      return socket.fire("users", event);
    };

    ChatRouter.prototype.removeUser = function(data, socket) {
      return socket.fire("users", Batman.SocketEvent.makeRemoveEvent(data.user, "users"));
    };

    ChatRouter.prototype.message = function(data, socket) {
      var content, event, text;
      text = data.message != null ? data.message : data.text;
      content = {
        "user": data.user,
        "text": text
      };
      event = Batman.SocketEvent.makePushEvent(content, "messages");
      return socket.fire("messages", event);
    };

    ChatRouter.prototype.task = function(data, socket) {
      var content, event;
      content = {
        "user": data.user,
        "title": data.title
      };
      event = Batman.SocketEvent.makePushEvent(content, "tasks");
      return socket.fire("tasks", event);
    };

    ChatRouter.prototype.send = function(obj, websocket) {
      /*
        sends event to the websocket
      */

      var event, str;
      if (typeof obj === 'string') {
        return websocket.send(obj);
      } else {
        event = Batman.SocketEvent.fromData(obj);
        if (event.channel === "messages") {
          if (event.content != null) {
            if (event.content.text != null) {
              event.text = event.content.text;
            } else {
              if (event.content.data != null) {
                event.text = event.content.data;
              } else {
                event.text = event.content;
              }
            }
          }
        }
        str = JSON.stringify(Batman.SocketEvent.fromData(obj));
        return websocket.send(str);
      }
    };

    return ChatRouter;

  })(Batman.SimpleRouter);

}).call(this);

/*
//@ sourceMappingURL=chat_router.map
*/
