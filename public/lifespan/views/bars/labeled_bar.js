// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Denigma.LabeledBar = (function(_super) {
    __extends(LabeledBar, _super);

    function LabeledBar() {
      _ref = LabeledBar.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LabeledBar.prototype.append = function(row) {
      var bars;
      bars = LabeledBar.__super__.append.call(this, row);
      bars.append("rect").attr("class", "textmax");
      bars.append("rect").attr("class", "textmean");
      bars.append("rect").attr("class", "textmin");
      bars.append("text").attr("class", "max").text("max");
      bars.append("text").attr("class", "mean").text("mean");
      bars.append("text").attr("class", "min").text("min");
      return bars;
    };

    LabeledBar.prototype.updateLabel = function(sel, key) {};

    LabeledBar.prototype.rnd = function(numberToRound) {
      return Math.round(numberToRound * 10) / 10;
    };

    LabeledBar.prototype.updateBar = function(sel, key, h) {
      var back, bh, bw, fun, posBY, posTY, text, val,
        _this = this;
      LabeledBar.__super__.updateBar.call(this, sel, key, h);
      val = function(d) {
        return _this.rnd(d[_this.group].get(key));
      };
      fun = function(d) {
        return _this.scale(val(d)) - _this.minW + _this.poser.marginX;
      };
      bh = this.minH * 2;
      bw = this.minW * 2;
      posBY = this.poser.getMiddlePos(bh);
      back = this.select(sel, "text" + key, "rect");
      back.attr("height", bh).attr("x", this.poser.marginX).attr("y", posBY).attr("width", bw);
      posTY = this.poser.getMiddlePos(-this.minH);
      text = this.select(sel, key, "text");
      text.attr("x", this.poser.marginX).attr("y", posTY);
      text.transition().duration(this.poser.dur).attr("x", fun).attr("width", bw).attr("text-anchor", "middle").text(val);
      return back.transition().duration(this.poser.dur).attr("x", function(d) {
        return fun(d) - bw / 2;
      });
    };

    return LabeledBar;

  })(Denigma.ExperimentBar);

}).call(this);

/*
//@ sourceMappingURL=labeled_bar.map
*/
