// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Denigma.DecorView = (function(_super) {
    __extends(DecorView, _super);

    function DecorView(poser, width) {
      this.width = width;
      DecorView.__super__.constructor.call(this, poser);
    }

    DecorView.prototype.append = function(rows) {
      /*
        adds rowumn decorations
      */

      var border, h;
      h = this.poser.contentHeight();
      border = rows.append("rect");
      return border.attr("class", "decor").attr("width", this.width).attr("height", h).attr("rx", 10).attr("ry", 10);
    };

    DecorView.prototype.update = function(rows) {
      var dec;
      dec = rows.select(".decor");
      dec.each(function(d, i) {
        var el, funOut, funOver,
          _this = this;
        el = $(this);
        funOver = function(dat) {
          if (el.style != null) {
            return el.attr("stroke-width", 8).style("stroke", function(d) {
              return d.color;
            });
          }
        };
        funOut = function(dat) {
          if (el.style != null) {
            return el.attr("stroke-width", 3).style("stroke", function(d) {
              return d.color;
            });
          }
        };
        d.on("over", funOver);
        return d.on("out", funOut);
      });
      return dec.style("stroke", function(d) {
        return d.color;
      }).attr("stroke-width", 3);
    };

    return DecorView;

  })(Denigma.BasicView);

}).call(this);

/*
//@ sourceMappingURL=decor_view.map
*/
