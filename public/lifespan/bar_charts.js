// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Denigma.BarCharts = (function(_super) {
    __extends(BarCharts, _super);

    /*
      class to generate chars with d3js
    */


    BarCharts.prototype.node = void 0;

    BarCharts.prototype.svg = void 0;

    BarCharts.prototype.width = 0;

    BarCharts.prototype.height = 0;

    BarCharts.prototype.poser = void 0;

    BarCharts.prototype.iconView = void 0;

    BarCharts.prototype.decorView = void 0;

    BarCharts.prototype.iconWidth = 180;

    BarCharts.prototype.durNew = 400;

    function BarCharts(selector, subclass, poser) {
      var minH, minW, resources;
      this.poser = poser;
      /*
        jquery-like selector string is passed,
        something like '#lifespan'
      */

      BarCharts.__super__.constructor.call(this, selector, subclass);
      this.decorView = new Denigma.DecorView(this.poser, this.width);
      this.iconView = new Denigma.IconView(poser = this.poser, resources = "assets/lifespan/resources");
      this.barView = new Denigma.BarView(poser = this.poser, minW = 15, minH = 10);
    }

    BarCharts.prototype.setSize = function(w, h) {
      /*
        sets size of the main svg
      */

      this.width = w;
      this.height = h;
      return this.svg.attr("width", w).attr("height", h);
    };

    BarCharts.prototype.append = function(novel) {
      var bars, icons, rows;
      rows = novel.append('svg');
      rows.attr("class", "row");
      rows.attr("y", 0);
      this.decorView.width = this.width;
      this.decorView.append(rows);
      icons = rows.append("svg");
      icons.attr("class", "icon");
      this.iconView.append(icons);
      bars = rows.append("svg");
      bars.attr("class", "bar").attr("x", this.iconWidth);
      this.barView.append(bars);
      return novel;
    };

    BarCharts.prototype.update = function(sel) {
      var bars, icons, pos;
      pos = this.poser.getRowPos;
      icons = sel.select("svg.icon");
      icons.attr("width", this.iconWidth);
      this.iconView.update(icons);
      bars = sel.select("svg.bar");
      bars.attr("x", this.iconWidth);
      bars.attr("width", this.width - this.iconWidth);
      this.barView.update(bars);
      sel.transition().duration(this.durNew).attr("y", pos).attr("width", this.width);
      sel.on("mouseover", function(d) {
        return d.fire("over");
      });
      sel.on("mouseout", function(d) {
        return d.fire("out");
      });
      return this.decorView.update(sel);
    };

    BarCharts.prototype.hide = function(sel) {
      var tr;
      tr = sel.transition();
      tr.duration(this.durNew).attr("y", 0);
      return tr.delay(this.durNew).remove();
    };

    return BarCharts;

  })(Denigma.Charts);

}).call(this);

/*
//@ sourceMappingURL=bar_charts.map
*/
