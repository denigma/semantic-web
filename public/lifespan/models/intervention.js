// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Denigma.Manipulation = (function(_super) {
    __extends(Manipulation, _super);

    function Manipulation(name, desc, icon) {
      this.name = name;
      this.desc = desc;
      this.icon = icon;
    }

    return Manipulation;

  })(Batman.Object);

  Denigma.Species = (function() {
    /*
      class of the species
    */

    function Species(commonName, latinName, lifespan, icon) {
      this.commonName = commonName;
      this.latinName = latinName;
      this.lifespan = lifespan;
      this.icon = icon;
    }

    return Species;

  })();

  Denigma.Intervention = (function(_super) {
    __extends(Intervention, _super);

    /*
      Intervention with animal
    */


    Intervention.makeSum = function(key) {
      return {
        get: function() {
          return this.test.get(key) + this.control.get(key);
        }
      };
    };

    Intervention.makeDelta = function(key) {
      return {
        get: function() {
          return this.test.get(key) - this.control.get(key);
        }
      };
    };

    Intervention.makeMax = function(key) {
      return {
        get: function() {
          return Math.max(this.test.get(key), this.control.get(key));
        }
      };
    };

    Intervention.makeMin = function(key) {
      return {
        get: function() {
          return Math.min(this.test.get(key), this.control.get(key));
        }
      };
    };

    Intervention.accessor("number", Intervention.makeSum("number"));

    Intervention.accessor("deltaNumber", Intervention.makeDelta("number"));

    Intervention.accessor("deltaMax", Intervention.makeDelta("max"));

    Intervention.accessor("deltaMean", Intervention.makeDelta("mean"));

    Intervention.accessor("deltaMin", Intervention.makeDelta("min"));

    Intervention.accessor("max", Intervention.makeMax("max"));

    Intervention.accessor("min", Intervention.makeMin("min"));

    function Intervention(species, manipulation, test, control) {
      this.species = species;
      this.manipulation = manipulation;
      this.test = test;
      this.control = control;
      /*
        constructor that stores test, control groups and manipulations
      */

    }

    Intervention.getSpeciesName = function(d) {
      return d.species.commonName;
    };

    return Intervention;

  }).call(this, Batman.Object);

}).call(this);

/*
//@ sourceMappingURL=intervention.map
*/
