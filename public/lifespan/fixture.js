// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Denigma.Fixture = (function(_super) {
    __extends(Fixture, _super);

    /*
      this class is just for ease of use
      it has no other meaning
    */


    Fixture.prototype.controls = [];

    Fixture.prototype.tests = [];

    Fixture.prototype.ints = [];

    Fixture.prototype.animal = void 0;

    Fixture.prototype.manipulation = void 0;

    function Fixture() {
      this.species = new Denigma.Species("mice", "mus", 18, "mouse.svg");
      this.manipulation = new Denigma.Manipulation("radiaction", "test grouped lived and mutated inside the reactor", "radiation.svg");
    }

    Fixture.prototype.rand = function(min, max) {
      return Math.round(Math.random() * max + min);
    };

    Fixture.prototype.rnd_snd = function() {
      return (Math.random() * 2 - 1) + (Math.random() * 2 - 1) + (Math.random() * 2 - 1);
    };

    Fixture.prototype.rnd = function(mean, stdev) {
      /*
        closer to normal distribution
        where stdev = standard deviation
        TODO: change this ugly piece of code to something else
      */

      return Math.round(this.rnd_snd() * stdev + mean);
    };

    Fixture.accessor("max", {
      get: function() {
        var exp, m, max, _i, _len, _ref;
        max = 0;
        _ref = this.controls;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          exp = _ref[_i];
          m = exp.get("max");
          if (m > max) {
            max = m;
          }
        }
        return max;
      }
    });

    Fixture.prototype.clean = function() {
      this.controls = [];
      this.tests = [];
      return this.ints = [];
    };

    Fixture.prototype.genOrganisms = function(mean, stdev) {
      var a, an, animals, _i, _ref;
      animals = [];
      for (a = _i = 0, _ref = this.rand(5, 15); 0 <= _ref ? _i <= _ref : _i >= _ref; a = 0 <= _ref ? ++_i : --_i) {
        an = this.rnd(mean, stdev);
        if (an <= 0) {
          an = an * -1;
        }
        if (an === 0) {
          an = 1;
        }
        animals.push(an);
      }
      return animals;
    };

    Fixture.prototype.generate = function(num) {
      var control, controlOrganisms, i, int, mean, stdev, test, testOrganisms, _i;
      this.clean();
      if (num == null) {
        num = 10;
      }
      mean = this.rand(500, 1200);
      stdev = this.rand(300, 500);
      for (i = _i = 0; 0 <= num ? _i <= num : _i >= num; i = 0 <= num ? ++_i : --_i) {
        testOrganisms = this.genOrganisms(mean, stdev);
        test = new Denigma.Experiment("Chernobyl mouse", testOrganisms);
        this.tests.push(test);
        controlOrganisms = this.genOrganisms(mean, stdev);
        control = new Denigma.Experiment("House mouse", controlOrganisms);
        /*
        control.set "number", @rand(5,10)
        control.set "min", 10
        control.set "mean", @rand(10,20)
        control.set "max", @rand(25,30)
        */

        this.controls.push(control);
        int = new Denigma.Intervention(this.species, this.manipulation, test, control);
        this.ints.push(int);
      }
      return this.ints;
    };

    return Fixture;

  })(Batman.Object);

}).call(this);

/*
//@ sourceMappingURL=fixture.map
*/
