// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Batman.Page = (function() {
    Page.prototype.loading = false;

    function Page(count, previous, next) {
      this.count = count;
      this.previous = previous;
      this.next = next;
    }

    return Page;

  })();

  Batman.DjangoStorage = (function(_super) {
    __extends(DjangoStorage, _super);

    /*
      Storage with Django specific features
    */


    function DjangoStorage() {
      _ref = DjangoStorage.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DjangoStorage.prototype.after('create', 'read', 'update', DjangoStorage.skipIfError(function(env, next) {
      var json;
      this.paginate(env);
      if (env.json != null) {
        json = this.extractFromNamespace(env.json, this.recordJsonNamespace(env.subject));
        env.subject._withoutDirtyTracking(function() {
          return this.fromJSON(json);
        });
      }
      env.result = env.subject;
      return next();
    }));

    DjangoStorage.prototype.after('readAll', DjangoStorage.skipIfError(function(env, next) {
      var namespace;
      namespace = this.collectionJsonNamespace(env.subject);
      this.paginate(env);
      env.recordsAttributes = this.extractFromNamespace(env.json, namespace);
      if (Batman.typeOf(env.recordsAttributes) !== 'Array') {
        namespace = this.recordJsonNamespace(env.subject.prototype);
        env.recordsAttributes = [this.extractFromNamespace(env.json, namespace)];
      }
      env.result = env.records = this.getRecordsFromData(env.recordsAttributes, env.subject);
      return next();
    }));

    DjangoStorage.prototype.paginate = function(env) {
      if (env.json.results != null) {
        if (env.json.count != null) {
          env.subject.page = new Batman.Page(env.json.count, env.json.previous, env.json.next);
        }
        env.json = env.json.results;
      } else {
        env.subject.page = null;
      }
      return env;
    };

    DjangoStorage.prototype.request = function(env, next) {
      /*
        override to change put format
      */

      var key, options, value, _ref1;
      options = Batman.extend(env.options, {
        autosend: false,
        success: function(data) {
          return env.data = data;
        },
        error: function(error) {
          return env.error = error;
        },
        loaded: function() {
          env.response = env.request.get('response');
          return next();
        }
      });
      if (options.data != null) {
        if (options.method === "PUT") {
          _ref1 = options.data;
          for (key in _ref1) {
            value = _ref1[key];
            options.data = value;
            break;
          }
        }
      }
      console.log(options);
      env.request = new Batman.Request(options);
      return env.request.send();
    };

    return DjangoStorage;

  })(Batman.RestStorage);

}).call(this);

/*
//@ sourceMappingURL=django_storage.map
*/
