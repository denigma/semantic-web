// Generated by CoffeeScript 1.6.3
/*
  the basic workflow with charts is the following::

    on construction you pass the id of the element where you want to insert your charts to
    and the name of the class for your basic elements

  When you want to draw something you
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Denigma.Charts = (function(_super) {
    __extends(Charts, _super);

    /*
      abstract class that works with charts
    */


    Charts.prototype.node = void 0;

    Charts.prototype.svg = void 0;

    Charts.prototype.marginX = 10;

    Charts.prototype.marginY = 10;

    Charts.prototype.width = 0;

    Charts.prototype.height = 0;

    Charts.prototype.durNew = 400;

    function Charts(selector, subclass) {
      /*
        jquery-like selector string is passed,
        something like '#lifespan'
      */

      Charts.__super__.constructor.call(this, selector, "svg", subclass);
      this.svg = this.node.append("svg");
    }

    Charts.prototype.select = function(data) {
      return this.svg.selectAll("" + this.element + "." + this.subclass).data(data);
    };

    Charts.prototype.setSize = function(w, h) {
      /*
        sets size of the main svg
      */

      this.width = w;
      this.height = h;
      return this.svg.attr("width", w).attr("height", h);
    };

    return Charts;

  })(Denigma.Control);

}).call(this);

/*
//@ sourceMappingURL=charts.map
*/
